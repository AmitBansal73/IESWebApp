{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from \"src/environments/environment\";\nimport { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let QuestionService = /*#__PURE__*/(() => {\n  class QuestionService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl + 'api/Question/';\n      this.questionUrl = environment.apiUrl + 'api/Question/All';\n      this.newQuestionurl = environment.apiUrl + 'api/Question/AddQuestion/';\n    }\n    getQuestion() {\n      // return this.http.get<Question[]>(url: 'this.questionUrl');\n      return of([{\n        QuestionID: 123,\n        Question: \"What is a Quantum Theorem\",\n        Solution: \"This is test question Answer\",\n        DifficultyLevel: 1,\n        SubjectID: 123,\n        TopicID: 122\n      }]);\n    }\n    getQuestionsForPaper(paperId) {\n      //return this.http.get<Question[]>(this.baseUrl + paperId);\n      return of([{\n        QuestionID: 123,\n        Question: \"What is a Quantum Theorem\",\n        Solution: \"This is test question Answer\",\n        DifficultyLevel: 1,\n        SubjectID: 123,\n        TopicID: 122\n      }]);\n    }\n    addQuestion(stream, paperID) {\n      return this.http.post(this.newQuestionurl + paperID, JSON.stringify(stream), httpOptions).pipe(tap(() => console.log(`added Stream w/ id=`)), catchError(this.handleError('Add Stream')));\n    }\n    log(message) {\n      console.log(`StreamService: ${message}`);\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    static {\n      this.ɵfac = function QuestionService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || QuestionService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: QuestionService,\n        factory: QuestionService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return QuestionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}