{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { CONSTANTS } from '../model/CONSTANTS';\nimport * as i0 from \"@angular/core\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let UniversityService = /*#__PURE__*/(() => {\n  class UniversityService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.UniversitysUrl = CONSTANTS.API_URL + 'api/university/All';\n      this.addUrl = CONSTANTS.API_URL + 'api/university/New';\n      this.encoded = encodeURI(this.UniversitysUrl);\n      this.university = {\n        UniversityID: 0,\n        UniversityName: \"\",\n        CollegeCount: 0\n      };\n    }\n    //constructor(private http: HttpClient) { }\n    getTop4Universities() {\n      //return this.http.get<University[]>(this.UniversitysUrl);\n      return of([{\n        UniversityID: 1,\n        UniversityName: 'CCS University',\n        CollegeCount: 0\n      }, {\n        UniversityID: 2,\n        UniversityName: 'BR Ambedkar University',\n        CollegeCount: 0\n      }, {\n        UniversityID: 3,\n        UniversityName: 'Banaras Hindu University',\n        CollegeCount: 0\n      }]);\n    }\n    getUniversities() {\n      //return this.http.get<University[]>(this.UniversitysUrl);\n      return of([{\n        UniversityID: 1,\n        UniversityName: 'CCS University',\n        CollegeCount: 0\n      }, {\n        UniversityID: 2,\n        UniversityName: 'BR Ambedkar University',\n        CollegeCount: 0\n      }, {\n        UniversityID: 3,\n        UniversityName: 'Banaras Hindu University',\n        CollegeCount: 0\n      }]);\n    }\n    deleteUniversity(univ) {\n      return of();\n    }\n    addUniversity(university) {\n      return this.http.post(this.addUrl, JSON.stringify(university), httpOptions).pipe(tap(newUniversity => this.log(`added hero w/ id=${newUniversity.UniversityID}`)), catchError(this.handleError('addHero')));\n    }\n    HandleSuccess(data) {\n      return data.$values;\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    log(message) {\n      alert(`HeroService: ${message}`);\n    }\n    static {\n      this.ɵfac = function UniversityService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || UniversityService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UniversityService,\n        factory: UniversityService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UniversityService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}