{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { CONSTANTS } from '../model/CONSTANTS';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let PaperService = /*#__PURE__*/(() => {\n  class PaperService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = CONSTANTS.API_URL + 'api/Paper/';\n      this.paperUrl = CONSTANTS.API_URL + 'api/Paper/All';\n      this.newPaperurl = CONSTANTS.API_URL + 'api/Paper/New';\n    }\n    getPaper() {\n      //return this.http.get<Paper[]>(this.paperUrl, httpOptions);\n      return of([{\n        PaperID: 111,\n        UniversityID: 111,\n        CollegeID: 222,\n        StreamID: 222,\n        SubjectID: 333,\n        SemID: 11,\n        Year: 2021,\n        Cost: 121,\n        SubjectName: \"Math\",\n        CollegeName: \"BHU\",\n        UniversityName: \"UPTU\",\n        StreamName: \"Civil\",\n        SemesterName: \"IV\",\n        PaidAmount: 200,\n        PurchaseDate: \"23/07/2023\",\n        UserID: 123,\n        questioncount: 25\n      }]);\n    }\n    getPaperDetails(paperId) {\n      //return this.http.get<Paper>(this.baseUrl+'Paper/' + paperId, httpOptions);\n      return of({\n        PaperID: 111,\n        UniversityID: 111,\n        CollegeID: 222,\n        StreamID: 222,\n        SubjectID: 333,\n        SemID: 11,\n        Year: 2021,\n        Cost: 121,\n        SubjectName: \"Math\",\n        CollegeName: \"BHU\",\n        UniversityName: \"UPTU\",\n        StreamName: \"Civil\",\n        SemesterName: \"IV\",\n        PaidAmount: 200,\n        PurchaseDate: \"23/07/2023\",\n        UserID: 123,\n        questioncount: 25\n      });\n    }\n    addPaper(newPaper) {\n      return this.http.post(this.newPaperurl, JSON.stringify(newPaper), httpOptions).pipe(tap(newPaper => this.log(`added new Paper w/ id=1}`)), catchError(this.handleError('addPaper')));\n    }\n    log(message) {\n      alert(`HeroService: ${message}`);\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    static {\n      this.ɵfac = function PaperService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || PaperService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: PaperService,\n        factory: PaperService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PaperService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}