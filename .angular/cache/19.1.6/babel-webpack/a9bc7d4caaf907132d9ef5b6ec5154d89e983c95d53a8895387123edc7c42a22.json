{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { CONSTANTS } from '../model/CONSTANTS';\nimport * as i0 from \"@angular/core\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let CollegeService = /*#__PURE__*/(() => {\n  class CollegeService {\n    constructor() {\n      this.baseUrl = CONSTANTS.API_URL + 'api/College/';\n      this.CollegesUrl = CONSTANTS.API_URL + 'api/College/All';\n      this.newcollegeurl = CONSTANTS.API_URL + 'api/College/NewWithStream';\n      this.http = inject(HttpClient);\n    }\n    //constructor(private http: HttpClient) { }\n    getCollege() {\n      //return this.http.get<College[]>(this.baseUrl + \"All\");\n      return of([{\n        CollegeID: 1,\n        CollegeName: \"Test\",\n        StreamCount: 2,\n        StreamName: \"test\",\n        UnivID: 111,\n        Address: \"test\",\n        UniversityName: \"test\",\n        City: \"LA\",\n        StudentCount: 100\n      }]);\n    }\n    getCollegeDetails(collegeID) {\n      console.log(this.baseUrl + collegeID);\n      return this.http.get(this.baseUrl + collegeID);\n    }\n    getCollegeByUniversity(id) {\n      return this.http.get(this.baseUrl + \"University/\" + id);\n    }\n    addCollege(college) {\n      return this.http.post(this.newcollegeurl, JSON.stringify(college), httpOptions).pipe(tap(newCollege => this.log(`College added`)), catchError(this.handleError('Add College')));\n    }\n    updateStream(courses) {\n      return this.http.post(this.baseUrl + \"UpdateStream\", JSON.stringify(courses), httpOptions).pipe(tap(res => this.log(`College Updaed`)), catchError(this.handleError('Update College')));\n    }\n    log(message) {\n      alert(`HeroService: ${message}`);\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    static {\n      this.ɵfac = function CollegeService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || CollegeService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CollegeService,\n        factory: CollegeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CollegeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}