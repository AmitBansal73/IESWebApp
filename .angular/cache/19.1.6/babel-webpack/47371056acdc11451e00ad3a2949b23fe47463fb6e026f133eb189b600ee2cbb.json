{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { CONSTANTS } from '../model/CONSTANTS';\nimport * as i0 from \"@angular/core\";\nconst HttpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let SubjectService = /*#__PURE__*/(() => {\n  class SubjectService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.subject_url = CONSTANTS.API_URL + 'api/Subject/All';\n      this.newSubject_url = CONSTANTS.API_URL + 'api/Subject/New';\n    }\n    //constructor(private http:HttpClient) { }\n    getSubject() {\n      //return this.http.get<Subject[]>(this.subject_url);\n      return of([{\n        SubjectID: 123,\n        SubjectName: \"Quantum Physics\",\n        Description: \"Physics for BSC 1st year\",\n        Unit: 1\n      }]);\n    }\n    addSubject(subject) {\n      console.log(JSON.stringify(subject));\n      return this.http.post(this.newSubject_url, JSON.stringify(subject), HttpOptions).pipe(tap(() => this.log(`added Subject w/ id=${subject.SubjectName}`)), catchError(this.handleError('Add Subject')));\n    }\n    log(message) {\n      console.log(`SubjectService: ${message}`);\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    static {\n      this.ɵfac = function SubjectService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || SubjectService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: SubjectService,\n        factory: SubjectService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return SubjectService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}