{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { CONSTANTS } from '../model/CONSTANTS';\nimport * as i0 from \"@angular/core\";\nconst HttpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let StreamService = /*#__PURE__*/(() => {\n  class StreamService {\n    constructor() {\n      this.baseUrl = CONSTANTS.API_URL + 'api/Stream/';\n      this.streamurl = CONSTANTS.API_URL + 'api/Stream/All';\n      this.newstreamurl = CONSTANTS.API_URL + 'api/Stream/New';\n      this.encoded = encodeURI(this.streamurl);\n      this.http = inject(HttpClient);\n    }\n    //constructor(private http:HttpClient) { }\n    getstream() {\n      //return this.http.get<Stream[]>(this.streamurl);\n      return of([{\n        StreamID: 999,\n        StreamName: \"civil\",\n        CollegeCount: 5,\n        Description: \"Civil Engineering\"\n      }]);\n    }\n    getstreamForCollege(CollegeId) {\n      return this.http.get(this.baseUrl + \"College/\" + CollegeId);\n    }\n    log(message) {\n      console.log(`StreamService: ${message}`);\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n        this.log(`${operation} failed: ${error.message}`);\n        // Let the app keep running by returning an empty result.\n        return of(result);\n      };\n    }\n    addStream(stream) {\n      console.log(JSON.stringify(stream));\n      return this.http.post(this.newstreamurl, JSON.stringify(stream), HttpOptions).pipe(tap(() => this.log(`added Stream w/ id=${stream.StreamName}`)), catchError(this.handleError('Add Stream')));\n    }\n    static {\n      this.ɵfac = function StreamService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || StreamService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: StreamService,\n        factory: StreamService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return StreamService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}